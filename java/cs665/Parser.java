
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 28 12:51:29 EST 2011
//----------------------------------------------------

package cs665;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 28 12:51:29 EST 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\011\011\000\002" +
    "\022\005\000\002\012\004\000\002\013\005\000\002\013" +
    "\004\000\002\004\005\000\002\005\005\000\002\005\007" +
    "\000\002\005\004\000\002\007\011\000\002\010\011\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\021\003\000\002\006\006\000\002\014" +
    "\003\000\002\014\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\005\000\002\020\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\024\015\023\016\015\017\005\021\022\022" +
    "\014\025\011\031\013\032\007\035\004\001\002\000\006" +
    "\011\131\020\uffd9\001\002\000\004\035\uffd7\001\002\000" +
    "\004\035\123\001\002\000\004\011\115\001\002\000\030" +
    "\002\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\021\ufffe\022" +
    "\ufffe\025\ufffe\031\ufffe\032\ufffe\035\ufffe\001\002\000\020" +
    "\004\112\011\050\023\042\024\044\033\037\034\036\035" +
    "\035\001\002\000\030\002\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\021\ufff9\022\ufff9\025\ufff9\031\ufff9\032\ufff9\035" +
    "\ufff9\001\002\000\004\011\104\001\002\000\004\035\uffd6" +
    "\001\002\000\004\035\uffd8\001\002\000\030\002\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\025\ufffa" +
    "\031\ufffa\032\ufffa\035\ufffa\001\002\000\030\002\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\025\ufffb" +
    "\031\ufffb\032\ufffb\035\ufffb\001\002\000\004\020\101\001" +
    "\002\000\030\002\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\021\ufff7\022\ufff7\025\ufff7\031\ufff7\032\ufff7\035\ufff7\001" +
    "\002\000\012\016\015\017\005\021\022\022\014\001\002" +
    "\000\016\011\050\023\042\024\044\033\037\034\036\035" +
    "\035\001\002\000\030\002\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\025\ufff8\031\ufff8\032\ufff8\035" +
    "\ufff8\001\002\000\030\002\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\021\ufffc\022\ufffc\025\ufffc\031\ufffc\032\ufffc\035" +
    "\ufffc\001\002\000\030\002\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\021\ufffd\022\ufffd\025\ufffd\031\ufffd\032\ufffd\035" +
    "\ufffd\001\002\000\004\004\034\001\002\000\030\002\000" +
    "\014\000\015\000\016\000\017\000\021\000\022\000\025" +
    "\000\031\000\032\000\035\000\001\002\000\026\002\032" +
    "\015\023\016\015\017\005\021\022\022\014\025\011\031" +
    "\013\032\007\035\004\001\002\000\004\002\001\001\002" +
    "\000\030\002\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021" +
    "\uffff\022\uffff\025\uffff\031\uffff\032\uffff\035\uffff\001\002" +
    "\000\030\002\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\022\ufff4\025\ufff4\031\ufff4\032\ufff4\035\ufff4\001\002" +
    "\000\026\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012" +
    "\uffd9\020\uffd9\026\uffd9\027\uffd9\030\uffd9\001\002\000\024" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\001\002\000\024\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\012\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\001\002\000\024\004\uffe1\005\uffe1\006\uffe1\007\064" +
    "\010\063\012\uffe1\026\uffe1\027\uffe1\030\uffe1\001\002\000" +
    "\006\004\uffe4\012\uffe4\001\002\000\006\004\uffe8\012\uffe8" +
    "\001\002\000\020\004\uffe5\005\055\006\057\012\uffe5\026" +
    "\056\027\060\030\054\001\002\000\006\004\uffe7\012\uffe7" +
    "\001\002\000\024\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\012\uffde\026\uffde\027\uffde\030\uffde\001\002\000\024" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\001\002\000\004\004\053\001\002" +
    "\000\016\011\050\023\042\024\044\033\037\034\036\035" +
    "\035\001\002\000\004\012\052\001\002\000\024\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\026\uffda\027" +
    "\uffda\030\uffda\001\002\000\030\002\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\021\ufff1\022\ufff1\025\ufff1\031\ufff1\032" +
    "\ufff1\035\ufff1\001\002\000\012\011\050\033\037\034\036" +
    "\035\035\001\002\000\012\011\050\033\037\034\036\035" +
    "\035\001\002\000\012\011\050\033\037\034\036\035\035" +
    "\001\002\000\012\011\050\033\037\034\036\035\035\001" +
    "\002\000\012\011\050\033\037\034\036\035\035\001\002" +
    "\000\012\004\uffeb\005\055\006\057\012\uffeb\001\002\000" +
    "\024\004\uffe2\005\uffe2\006\uffe2\007\064\010\063\012\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\001\002\000\012\011\050\033" +
    "\037\034\036\035\035\001\002\000\012\011\050\033\037" +
    "\034\036\035\035\001\002\000\024\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\012\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\001\002\000\024\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\026\uffdf\027\uffdf\030\uffdf\001\002\000\012" +
    "\004\uffe9\005\055\006\057\012\uffe9\001\002\000\024\004" +
    "\uffe3\005\uffe3\006\uffe3\007\064\010\063\012\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\001\002\000\012\004\uffea\005\055\006" +
    "\057\012\uffea\001\002\000\030\002\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\021\uffee\022\uffee\025\uffee\031\uffee\032" +
    "\uffee\035\uffee\001\002\000\004\035\035\001\002\000\006" +
    "\004\075\020\076\001\002\000\030\002\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\025\ufff0\031\ufff0" +
    "\032\ufff0\035\ufff0\001\002\000\016\011\050\023\042\024" +
    "\044\033\037\034\036\035\035\001\002\000\004\004\100" +
    "\001\002\000\030\002\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\021\uffef\022\uffef\025\uffef\031\uffef\032\uffef\035\uffef" +
    "\001\002\000\016\011\050\023\042\024\044\033\037\034" +
    "\036\035\035\001\002\000\004\004\103\001\002\000\030" +
    "\002\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022" +
    "\uffe6\025\uffe6\031\uffe6\032\uffe6\035\uffe6\001\002\000\016" +
    "\011\050\023\042\024\044\033\037\034\036\035\035\001" +
    "\002\000\004\012\106\001\002\000\004\013\107\001\002" +
    "\000\024\015\023\016\015\017\005\021\022\022\014\025" +
    "\011\031\013\032\007\035\004\001\002\000\026\014\111" +
    "\015\023\016\015\017\005\021\022\022\014\025\011\031" +
    "\013\032\007\035\004\001\002\000\030\002\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed\025\uffed\031" +
    "\uffed\032\uffed\035\uffed\001\002\000\030\002\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\025\ufff2\031" +
    "\ufff2\032\ufff2\035\ufff2\001\002\000\004\004\114\001\002" +
    "\000\030\002\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021" +
    "\ufff3\022\ufff3\025\ufff3\031\ufff3\032\ufff3\035\ufff3\001\002" +
    "\000\016\011\050\023\042\024\044\033\037\034\036\035" +
    "\035\001\002\000\004\012\117\001\002\000\004\013\120" +
    "\001\002\000\024\015\023\016\015\017\005\021\022\022" +
    "\014\025\011\031\013\032\007\035\004\001\002\000\026" +
    "\014\122\015\023\016\015\017\005\021\022\022\014\025" +
    "\011\031\013\032\007\035\004\001\002\000\030\002\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec\025" +
    "\uffec\031\uffec\032\uffec\035\uffec\001\002\000\010\004\uffd9" +
    "\011\124\020\uffd9\001\002\000\004\012\125\001\002\000" +
    "\004\013\126\001\002\000\024\015\023\016\015\017\005" +
    "\021\022\022\014\025\011\031\013\032\007\035\004\001" +
    "\002\000\026\014\130\015\023\016\015\017\005\021\022" +
    "\022\014\025\011\031\013\032\007\035\004\001\002\000" +
    "\030\002\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6" +
    "\022\ufff6\025\ufff6\031\ufff6\032\ufff6\035\ufff6\001\002\000" +
    "\004\012\132\001\002\000\004\004\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\034\002\030\003\027\004\007\005\025\006" +
    "\024\007\016\010\015\011\011\012\023\013\020\020\017" +
    "\022\026\023\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\112\015\042\016\037\017\044\020" +
    "\045\021\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\071\023\072\001\001\000\016\014\046\015\042\016" +
    "\037\017\044\020\045\021\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\032\004\007\005\025\006\024" +
    "\007\016\010\015\011\011\012\023\013\020\020\017\022" +
    "\026\023\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\050" +
    "\015\042\016\037\017\044\020\045\021\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\070\016\037\017\044\020\045\001\001\000\010\016" +
    "\067\017\044\020\045\001\001\000\012\015\066\016\037" +
    "\017\044\020\045\001\001\000\010\016\061\017\044\020" +
    "\045\001\001\000\012\015\060\016\037\017\044\020\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\065\020\045\001\001\000\006\017\064\020\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\076\015\042\016\037\017\044\020\045\021\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\101\015\042\016\037\017\044\020\045\021\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\104\015" +
    "\042\016\037\017\044\020\045\021\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\107\003\027\004" +
    "\007\005\025\006\024\007\016\010\015\011\011\012\023" +
    "\013\020\020\017\022\026\023\005\001\001\000\032\003" +
    "\032\004\007\005\025\006\024\007\016\010\015\011\011" +
    "\012\023\013\020\020\017\022\026\023\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\115\015\042\016\037\017\044\020" +
    "\045\021\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\120\003\027\004\007\005\025\006\024\007" +
    "\016\010\015\011\011\012\023\013\020\020\017\022\026" +
    "\023\005\001\001\000\032\003\032\004\007\005\025\006" +
    "\024\007\016\010\015\011\011\012\023\013\020\020\017" +
    "\022\026\023\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\126" +
    "\003\027\004\007\005\025\006\024\007\016\010\015\011" +
    "\011\012\023\013\020\020\017\022\026\023\005\001\001" +
    "\000\032\003\032\004\007\005\025\006\024\007\016\010" +
    "\015\011\011\012\023\013\020\020\017\022\026\023\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/* 
	 * grammar:
	 *
	 * stmtList ::= stmt |  stmtList stmt ;
	 * stmt ::= printStmt | declStmt | assignStmt | ifStmt | whileStmt | funcDeclStmt | CallStmt;
	 * funcDeclStmt ::= type Ident "(" ")" "{" stmtList "}";
	 * callExpr ::= Ident "(" ")"
	 * callStmt ::= callExpr ";"
	 * returnStmt :: return ";"| return expr ";" ;
	 * printStmt ::= "print" expr ";" ;
	 * assignStmt :: = vblRef "=" expr ";" | ; 
	 * declStmt  ::= type vblRef ";" | type vblRef "=" expr ";" | FINAL declStmt;
	 * ifThenStmt ::= if "(" expr ")" "{" stmtList "}" ;
	 * whileThenStmt ::= while "(" expr ")" "{" stmtList "}" ;
	 * boolExpr ::= expr1 "<"  expr1 
		            | expr1 "=="  expr1 ; //others
	              | TRUE | FALSE;
	 * expr  ::= expr1 | boolExpr;
	 * expr1 ::= term | expr1 "+" term | expr1 "-" term | boolExpr;
	 * term ::= factor | term "*" factor | term "/" factor ; 
	 * factor ::= vblRef | number | floatnumber | "(" expr ")";
	 * vblRef ::= identifier;
	 * type = "float" | "int " | "boolean"
	 */

  // trace output controls
 public static final boolean traceProd = false;
 public static final boolean showResult = false;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= BOOLEAN 
            {
              Node RESULT =null;
		
        RESULT = Type.typeBool;
		if (Parser.traceProd)
		{
			String trace= "type ::= BOOLEAN";
			if (Parser.showResult) trace = trace + RESULT;
			System.out.println(trace);
		}
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= INT 
            {
              Node RESULT =null;
		
        RESULT = Type.typeInt;
		if (Parser.traceProd)
		{
			String trace= "type ::= INT";
			if (Parser.showResult) trace = trace + RESULT;
			System.out.println(trace);
		}
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= FLOAT 
            {
              Node RESULT =null;
		
	        RESULT = Type.typeFloat;
		if (Parser.traceProd)
		{
			String trace= "type ::= FLOAT";
			if (Parser.showResult) trace = trace + RESULT;
			System.out.println(trace);
		}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vblRef ::= IDENT 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	        RESULT = new VblRefNode(id);
		if (Parser.traceProd)
		{
			String trace= "vblRef ::= IDENT";
			if (Parser.showResult) trace = trace + RESULT;
			System.out.println(trace);
		}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vblRef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= LPAREN expr RPAREN 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		    RESULT = e;
		if (Parser.traceProd)
		{
			String trace= "factor ::= ( expr ) ";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= vblRef 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	       RESULT = v;
		if (Parser.traceProd)
		{
			String trace= "factor ::= vblRef";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= FLOATNUMBER 
            {
              Node RESULT =null;
		int fnumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fnumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fnum = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	        RESULT = new FloatLiteralNode(fnum);
		if (Parser.traceProd)
		{
			String trace= "factor ::= float";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= NUMBER 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	        RESULT = new IntLiteralNode(num);
		if (Parser.traceProd)
		{
			String trace= "factor ::= number";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term ::= factor 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		 RESULT = f;
		if (Parser.traceProd)
		{
			String trace= "term   ::= factor";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
	     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= term DIVIDE factor 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	         RESULT =  new BinOpNode(sym.DIVIDE, (ExprNode) t, (ExprNode) f);
		if (Parser.traceProd)
		{
			String trace= "term   ::= term DIVIDE  factor";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= term TIMES factor 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	         RESULT = new BinOpNode(sym.TIMES, (ExprNode) t, (ExprNode) f);
		if (Parser.traceProd)
		{
			String trace= "term   ::= term TIMES  factor";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr1 ::= term 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		 RESULT = t;
		if (Parser.traceProd)
		{
			String trace= "expr   ::= term  ";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr1 ::= expr1 MINUS term 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 	         RESULT = new BinOpNode( sym.MINUS, (ExprNode) e1, (ExprNode) t);
		if (Parser.traceProd)
		{
			String trace= "expr   ::= expr MINUS term";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr1 ::= expr1 PLUS term 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	        RESULT = new BinOpNode( sym.PLUS, (ExprNode) e1, (ExprNode) t);
		if (Parser.traceProd)
		{
			String trace= "expr   ::= expr PLUS term";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= boolExpr 
            {
              Node RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		 RESULT = be;
		if (Parser.traceProd)
		{
			String trace= "expr   ::= boolExpr  ";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr1 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	        RESULT = e1;
		if (Parser.traceProd)
		{
			String trace= "expr   ::= expr PLUS term";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignStmt ::= vblRef ASSIGN expr SEMI 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new AssignStmtNode( (VblRefNode)v, (ExprNode)e);
        if (Parser.traceProd)
       {
				String trace= "assignStmt ::= varible ASSIGN expr";
        if (Parser.showResult) trace = trace + ":  => " + RESULT;
        System.out.println(trace);
       }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolExpr ::= FALSE 
            {
              Node RESULT =null;
		
	  RESULT = new BoolLiteralNode(sym.FALSE);
	if (Parser.traceProd)
	{
		String trace= "expr   ::= FALSE  ";
		if (Parser.showResult) trace = trace + ":   => " + RESULT;
		System.out.println(trace);
	}
	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolExpr ::= TRUE 
            {
              Node RESULT =null;
		
	  RESULT = new BoolLiteralNode(sym.TRUE);
	if (Parser.traceProd)
	{
		String trace= "expr   ::= TRUE  ";
		if (Parser.showResult) trace = trace + ":   => " + RESULT;
		System.out.println(trace);
	}
	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolExpr ::= expr1 EQUAL expr1 
            {
              Node RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node le = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node re = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BoolOpNode(sym.EQUAL, (ExprNode)le, (ExprNode)re);
			if (Parser.traceProd)
			{
				String trace= "boolOpExpr   ::= boolOpExpr EQUAL expr";
				if (Parser.showResult) trace = trace + ":   => " + RESULT;
				System.out.println(trace);
		  }
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolExpr ::= expr1 GREATER expr1 
            {
              Node RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node le = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node re = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BoolOpNode(sym.GREATER, (ExprNode)le, (ExprNode)re);
			if (Parser.traceProd)
			{
				String trace= "boolOpExpr   ::= boolOpExpr GREATER expr";
				if (Parser.showResult) trace = trace + ":   => " + RESULT;
				System.out.println(trace);
		  }
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolExpr ::= expr1 LESS expr1 
            {
              Node RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node le = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node re = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BoolOpNode(sym.LESS, (ExprNode)le, (ExprNode)re);
			if (Parser.traceProd)
			{
				String trace= "boolOpExpr   ::= boolOpExpr LESS expr";
				if (Parser.showResult) trace = trace + ":   => " + RESULT;
				System.out.println(trace);
			}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // whileStmt ::= WHILE LPAREN expr RPAREN LCURLY stmtList RCURLY 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

        RESULT = new whileStmtNode( (ExprNode)e, (StmtList)sl );
	    	if (Parser.traceProd)
		  {
		  	String trace= "while statement";
		  	if (Parser.showResult) trace = trace + ":   => " + RESULT;
		  	System.out.println(trace);
	  	}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ifThenStmt ::= IF LPAREN expr RPAREN LCURLY stmtList RCURLY 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	         
        RESULT = new ifThenStmtNode( (ExprNode)e, (StmtList)sl );
	    	if (Parser.traceProd)
		  {
		  	String trace= "ifThen statement";
		  	if (Parser.showResult) trace = trace + ":   => " + RESULT;
		  	System.out.println(trace);
	  	}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifThenStmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declStmt ::= FINAL declStmt 
            {
              Node RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ds = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ((DeclNode)ds).finalDecl();
        RESULT = ds;
		if (Parser.traceProd)
		{
			String trace= "declStmt ::= FINAL declStmt";
			if (Parser.showResult) trace = trace + ":   => " + RESULT.toString();
			System.out.println(trace);
		}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declStmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declStmt ::= type vblRef ASSIGN expr SEMI 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//TODO
		        RESULT = new DeclNode(sym.INT, (VblRefNode) v, (ExprNode) e, (Type) t);
		if (Parser.traceProd)
		{
			String trace= "declStmt ::= FLOAT vblRef initializer";
			if (Parser.showResult) trace = trace + ":   => " + RESULT.toString();
			System.out.println(trace);
		}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declStmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declStmt ::= type vblRef SEMI 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new DeclNode(sym.FLOAT, (VblRefNode) v, (Type) t);
		if (Parser.traceProd)
		{
			String trace= "declStmt ::= FLOAT vblRef";
			if (Parser.showResult) trace = trace + ":   => " + RESULT.toString();
			System.out.println(trace);
		}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declStmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // printStmt ::= PRINT expr SEMI 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new PrintStmtNode( (ExprNode) e);
	    	if (Parser.traceProd)
		  {
		  	String trace= "printStmt ::= PRINT expr";
		  	if (Parser.showResult) trace = trace + ":   => " + RESULT;
		  	System.out.println(trace);
	  	}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // returnStmt ::= RETURN SEMI 
            {
              Node RESULT =null;
		
        RESULT = new ReturnStmtNode();;
        if(Parser.traceProd) 
      {
				String trace= "stmt ::= void returnStmt";
        if(Parser.showResult) trace = trace + ":    => " + RESULT; 
        System.out.println(trace);
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // returnStmt ::= RETURN expr SEMI 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new ReturnStmtNode( (ExprNode) e);
	    	if (Parser.traceProd)
		  {
		  	String trace= "returnStmt ::= return expr";
		  	if (Parser.showResult) trace = trace + ":   => " + RESULT;
		  	System.out.println(trace);
	  	}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // callStmt ::= callExpr SEMI 
            {
              Node RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ce = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new CallStmtNode( (CallExprNode)ce );
	    	if (Parser.traceProd)
		  {
		  	String trace= "callStmt";
		  	if (Parser.showResult) trace = trace + ":   => " + RESULT;
		  	System.out.println(trace);
	  	}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callStmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // callExpr ::= IDENT LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new CallExprNode((String)id );
	    	if (Parser.traceProd)
		  {
		  	String trace= "callExpr";
		  	if (Parser.showResult) trace = trace + ":   => " + RESULT;
		  	System.out.println(trace);
	  	}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcDeclStmt ::= type IDENT LPAREN RPAREN LCURLY stmtList RCURLY 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new FuncDecl((Type)t, (String)ident, (StmtList) sl);
	    	if (Parser.traceProd)
		  {
		  	String trace= "FuncDecl statement";
		  	if (Parser.showResult) trace = trace + ":   => " + RESULT;
		  	System.out.println(trace);
	  	}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDeclStmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= returnStmt 
            {
              Node RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node rs = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = rs;
        if(Parser.traceProd) 
      {
				String trace= "stmt ::= returnStmt";
        if(Parser.showResult) trace = trace + ":    => " + RESULT; 
        System.out.println(trace);
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= callStmt 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cs = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = cs;
        if(Parser.traceProd) 
      {
				String trace= "stmt ::= callStmt";
        if(Parser.showResult) trace = trace + ":    => " + RESULT; 
        System.out.println(trace);
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= funcDeclStmt 
            {
              Node RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fds = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = fds;
        if(Parser.traceProd) 
      {
				String trace= "stmt ::= funcDeclStmt";
        if(Parser.showResult) trace = trace + ":    => " + RESULT; 
        System.out.println(trace);
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= whileStmt 
            {
              Node RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ws = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = ws;
        if(Parser.traceProd) 
      {
				String trace= "stmt ::= whileStmt SEMI";
        if(Parser.showResult) trace = trace + ":    => " + RESULT; 
        System.out.println(trace);
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= ifThenStmt 
            {
              Node RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node is = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = is;
        if(Parser.traceProd) 
      {
				String trace= "stmt ::= ifThenStmt SEMI";
        if(Parser.showResult) trace = trace + ":    => " + RESULT; 
        System.out.println(trace);
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= assignStmt 
            {
              Node RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node as = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = as;
        if(Parser.traceProd) 
      {
				String trace= "stmt ::= assignStmt SEMI";
        if(Parser.showResult) trace = trace + ":    => " + RESULT; 
        System.out.println(trace);
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= declStmt 
            {
              Node RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ds = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = ds;
	 	    if (Parser.traceProd)
		  {
			  String trace= "stmt ::= declStmt SEMI";
			  if (Parser.showResult) trace = trace + ":   => " + RESULT;
			  System.out.println(trace);
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt ::= printStmt 
            {
              Node RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = ps;
		    if (Parser.traceProd)
		  {
			  String trace= "stmt ::= printStmt SEMI";
			  if (Parser.showResult) trace = trace + ":   => " + RESULT;
			  System.out.println(trace);
		  }
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		((StmtList)sl).add((StmtNode)s);
		RESULT = sl;
		if (Parser.traceProd)
		{
			String trace= "stmtlist ::= stmtlist | stmt";
			if (Parser.showResult) trace = trace + ":   => " + RESULT;
			System.out.println(trace);
		}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // stmtList ::= stmt 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		StmtList sl = new StmtList();
		sl.add((StmtNode) s);
		RESULT = sl;
	  if (Parser.traceProd) 
		{
		     String trace= "stmtList ::= stmt";
		     if (Parser.showResult) trace = trace + ":   => " + RESULT;
		     System.out.println(trace);
		}
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= stmtList EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

